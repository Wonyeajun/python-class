# board = []
# for i in range(100):
#     board.append([0]*100)
#
# n = int(input())
# for _ in range(n):
#     x, y = input().split()
#     x = int(x)
#     y = int(y)
#     for a in range(x, x+10):
#         for c in range(y, y+10):
#          board[a][c] = 1
# answer = 0
# for b in board:
#     answer += b.count(1)
# print(answer)
#
#--------------------------------------------------------------------------
#
#     # 해당 자리가 색종이로 덮여있다면 1로 변경
#     # 그 다음엔 1의 개수를 센다. == 넓이

# def sum_nums(a,b,c,d,e,f,g,h,*nums):
#     answer = 0
#     for i in nums:
#         answer += i
#     return answer
# def print_Hi_or_value(value = "Hi"):
#     print(value)
#
# #print_Hi_or_string()을 실행시킬때 문자열을 넘기면 해당 문자열을 출력하고,
# #아무것도 넘기지 않을 경우 Hi 를 출력한다.
# a = [1, 2, 3, 4, 5]
# print_Hi_or_value()
#-----------------------------------------------------------------------
#pop([index]) : 리스트에서 값을 추출 해주는 함수
# a = [5, 6, 7, 8]
# def my_pop(_list, index = -1):
#     result = _list[index]
#     del _list[index]
#     return result, _list


#pop과 동일한 동작을 하는 함수 my_pop을 구현하시오. 단, 실행 방식은 my_pop(리스트, 인덱스번호)이다.
# 인덱스 번호에 값을 넣지 않을 경우 자동으로 마지막 원소 값을 추출하면 된다.
#print(my_pop(a,2))    # => (7, [5, 6, 8])
#print(my_pop(a))      # => (8, [5, 6, 7])
#--------------------------------------------------------------------
# def my_replace(string,old, new, count = 0):
#     if count == 0:
#         count = len(string)
#     new_string = ""
#     for i in string:
#         if count and i == old:
#             if i == old:
#                 new_string += new
#                 count -= 1
#
#         else:
#             new_string += i
#
#     return new_string
#
# c = "CCCCCC"
# print(my_replace(c,'C',"A"))    # 출력값 => "AAAAAA"
# print(my_replace(c,'C',"A",3))  #출력값 => "AAACCC"
#-----------------------------------------------------------------------
# def isPrime(n):
#     if n <=  1: return False
#     for i in range(2, n):
#         if n % i == 0:
#             return False
#     return True
# 
# def solution(nums):
#     cnt = 0
#     # num에서 3개의 수들을 더해준다.
#     # 더한 숫자가 소수인지를 판별한다. # 함수(is_prime())로 만들어서 확인한다.
#     # 소수일 경우 정답의 개수를 증가 시켜준다.
#     if isPrime(숫자 세개를 더한 값):
#         cnt += 1
#     return cnt
