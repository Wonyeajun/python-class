# def solution(park, routes):
#     answer = []
#     a = []
#     b = []
#     nomeaning = 0
#     for i in routes:
#         a.append(",".join(i).split(","))  # [['E', ' ', '2'], ['S', ' ', '2'], ['W', ' ', '1']]
#     for i in park:
#         i.replace("O", "o")
#         b.append(",".join(i).split(","))  # [['S', 'O', 'O'], ['O', 'X', 'X'], ['O', 'O', 'O']]
#     S, s = 0, 0
#     for i in range(len(a)):
#         Flag = 0
#         if a[i][0] == "N":
#             if b.index(b.index("S")) + int(a[i][2]) == len(a[0]):
#                 nomeaning += 1
#                 Flag = 1
#             if Flag == 0:
#
#
#     return answer                #내 풀이 (당연히 실패....)
#---------------------------------------------------------------------------
# def solution(park,routes):
#     direction = {"E" : [0, 1], "W" : [0, -1], "S" : [1,0], "N" : [-1,0]}
#     x,y = 0,0
#     for i in range(len(park)):
#         for j in range(len(park[i])):
#             if park[i][j] == "S":
#                 x,y = i,j
#                 break
#     for route in routes:
#         d,n = route.split()
#         nx,ny = x,y
#         dx,dy = direction[d]
#         for i in range(int(n)):
#             nx += dx
#             ny += dy
#             if nx < 0 or ny < 0 or nx >= len(park) or ny >= len(park[0]) or park[nx][ny] == "x":
#                 nx,ny = x,y
#                 break
#             x,y = nx,ny
#     return[x,y]
# print(solution(["SOO","OOO","OOO"],	["E 2","S 2","W 1"]))
# print(solution(["SOO","OXX","OOO"],	["E 2","S 2","W 1"]))   #선생님 풀이(정답이긴 한데 안되는 게 많음)
#----------------------------------------------------------------------------------------------------
# def solution(name, yearning, photo):
#     answer = []
#     names = {}
#     for i in range(len(name)):
#         names[name[i]] = yearning[i]
#     print(names)
#     for i in range(len(photo)):
#         a = 0
#         for j in range(len(photo[i])):
#             for u in range(len(names)):
#                 if photo[i][j] == name[u]:
#                     a += yearning[u]
#         answer.append(a)
#     return answer
# print(solution(["may", "kein", "kain", "radi"],	[5, 10, 1, 3],	[["may"],["kein", "deny", "may"], ["kon", "coni"]]))
# print(solution(["kali", "mari", "don"],	[11, 1, 55]	,[["kali", "mari", "don"], ["pony", "tom", "teddy"], ["con", "mona", "don"]]))
# print(solution(["may", "kein", "kain", "radi"],	[5, 10, 1, 3],	[["may", "kein", "kain", "radi"],["may", "kein", "brin", "deny"], ["kon", "kain", "may", "coni"]]))
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def solution(clothes):
    answer = 0
    closet = []
    multy_clothes = 0
    Flag = 0
    for i in range(len(clothes)):
        if clothes[i][1] not in closet:
            closet.append(clothes[i][1])
        elif clothes[i][1] in closet and Flag == 0:
            multy_clothes += 2
            Flag = 1
        elif Flag == 1 and clothes[i][1] in closet:
            multy_clothes += 1
    if multy_clothes == len(clothes):
        answer += len(clothes)
        return answer
    answer += len(clothes) + multy_clothes * (len(clothes) - multy_clothes)

    return answer
print(solution([["crow_mask", "face"], ["blue_sunglasses", "face"], ["smoky_makeup", "face"]]))
print(solution([["yellow_hat", "headgear"], ["blue_sunglasses", "eyewear"], ["green_turban", "headgear"]]))
print(solution([["yellow_hat", "headgear"], ["blue_sunglasses", "eyewear"], ["green_turban", "headgear"], ["black_sunglasses", "eyewear"]]))
