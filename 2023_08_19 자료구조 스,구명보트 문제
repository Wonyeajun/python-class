def solution(people, limit):
    answer = 0  # people = [70, 50, 60, 10, 80, 70]
    people.sort()   # people = [10, 50, 60, 70, 70, 80]
    a = 0
    b = len(people) - 1
    while a < b:
        if people[a] + people[b] <= limit:
            answer += 1
            a += 1
        b -= 1
    return len(people) - answer # -->  answer + (len(people) - 2 * answer)
print(solution([70, 80, 50, 50], 100))
프로그래머스 "구명보트" 문제
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#스택(Stack)
#스텍(stack)은 말 그대로 쌓는다는 의미로서, 데이터를 쌓아 올리는 형태의 자료구조를 말하며, 가장
#마지막에 들어온 데이터가 먼저 나가는 형태인, 후입선출(Last in First Out-LIFO)특성을 가진다.
#
# class StackElement:
#     #생성자 생성
#     def __init__(self,data,link):
#         #요소의 값
#         self.data = data
#         #다음 요소의 위치
#         self.link = link
#
# class Stack:
#     def __init__(self):
#         # self.top: 항상 stack의 최상위 요소를 확인한다.
#         self.top = None
#
#
#     #가장 최상위 노드(요소)의 데이터를 return 하는 함수
#     #1개의 사용위치
#     def peek(self):
#         if self.top is None:
#             return None
#         else:
#             return self.top.data
#
#     def push(self,data):
#         # 비어있을 때
#         # Element 생성(data: 입력받은 데이터, link: 아무것도 없으므로 None)
#         # 새로운 Element가 들어왔으므로 top은 가장 최상위 Element를 가리킨다.
#         if self.top is None:
#             elem = StackElement(data,None)
#             self.top = elem
#         # 비어있지 않을 때
#         # Element 생성(data: 입력받은 데이터, link: 기존의 top이 바라보던 Element)
#         # 새로운 Element가 들어왔으므로 top은 방금 들어온 Element를 가리킨다.
#         else:
#             elem = StackElement(data,self.top)
#             self.top = elem
#
#     def pop(self):
#         if self.top is None:
#             return None
#         else:
#             ret_data = self.top.data
#             self.top = self.top.link
#             return ret_data
# st = Stack()
# print(st.peek())
#
# for i in range(1,6):
#     st.push(i)
#     print(st.peek())
#
# for _ in range(5):
#     print(st.pop)
#------------------------------------------------------------------------------
# def solution(prices):
#     answer = []
#     for i in range(len(prices)-1):
#         a = 0
#         for j in range(i, len(prices)):
#             if j == 4:
#                 break
#             elif prices[i] <= prices[j + 1]:
#                 a += 1
#         answer.append(a)
#     answer.append(0)
#     return answer
# print(solution([1, 2, 3, 2, 3]))
# 프로그래머스 주식 가격(스택)문제
