def solution(s):
    answer = ""
    a = ["(", ")"]
    opened = 0
    closed = 0
    b = list(s)
    if b[0] == a[1]:
        return False
    else:
        for i in range(0, len(b)):
            if s[i] == a[0]:
                opened += 1
            elif s[i] == a[1]:
                closed += 1
    if opened == closed:
        answer = True
    else:
        answer = False
    return answer              #프로그래머스 '올바른 괄호'문제 내 풀이(인데 거의 다 맞음... 84.7점)
---------------------------------------------------------------------------------------------
def solution(s):
    stack = []
    for i in s:
        if stack  == [] or i == "(":
            stack.append(i)
        elif stack[-1] == "(" and i == ")":
            stack.pop()
    return len(stack) == 0
print(solution("(())"))              #프로그래머스 '올바른 괄호'문제 선생님 풀이
---------------------------------------------------------------------------------------------
노드 클래스
class QueueElement:
    def __init__(self, data, link = None):
        self.data = data
        self.link = link

#Queue  클래스
class Queue:
    def __init__(self):
        self.rear = None     # <-- rear : 입구(가장 최근에 들어온 element를 가리킨다.)
        self.front = None    # <-- front : 출구(다음에 나갈 element를 가리킨다.)

    # data를 입력 받고 element를 Queue에 추가하는 함수
    def enque(self,data):
        #Queue가 비어있을 때
        if self.rear is None:
            elem = QueueElement(data)
            self.rear = self.front = elem
        #Queue가 비어있지 않을 때
        else:
            elem = QueueElement(data)
            self.rear.link = elem
            self.rear = elem

    def deque(self):
        #비어있을 때
        if self.front is None:
            return None
        #elem이 하나 있을 때
        elif self.rear == self.front:
            ret_data = self.front.data
            self.rear = self.front = None
            return ret_data
        #elem이 여러 개 존재할 때
        else:
             ret_data = self.front.data
             self.front = self.front.link
             return ret_data

q = Queue()
for i in range(1,6):
    q.enque(i)
for _ in range(6):
    print(q.deque())
#-------------------------------------------------------------------------------------
import sys
input = sys.stdin.readline

n = int(input())
queue = []
start =
end = 
for _ in range(n):
    order = input().split()
    if order[0] == 'push':
        queue.append(order[1])
    elif order[0] == 'pop':
        if queue:
            print(queue.pop(0))
        else:
            print(-1)
    elif order[0] == 'size':
        print(len(queue))
    elif order[0] == 'empty':
        print((queue == []) + 0)
    elif order[0] == "front":
        if queue:
            print(queue[0])
        else:
            print(-1)
    else:
        if queue:
            print(queue[-1])
        else:
            print(-1)
#백준 '큐'문제
