def solution(progresses, speeds):
    answer = []
    days = 0
    cnt = 0
    while len(progresses) > 0:
        if (progresses[0] + days * speeds[0]) >= 100:
            progresses.pop(0)
            speeds.pop(0)
            cnt += 1
        else:
            if cnt > 0:
                answer.append(cnt)
                print(answer)
                cnt = 0
            else:
                days += 1
    answer.append(cnt)  #마지막 cnt를 더해주고 while문이 끝나버려서
    #print(answer)
    return answer                # 내풀이 정답!!!!!
print(solution([93, 50, 55], [1, 30, 5]))
print(solution([95, 90, 99, 99, 80, 99], [1, 1, 1, 1, 1, 1]))
------------------------------------------------------------------------------------------
def solution(progresses, speeds):
    answer = []
    terms = []
    for i in range(len(progresses)):
        t = (100 - progresses[i]) // speeds[i]
        term = t + ((100 - progresses[i]) % speeds[i] != 0)
        terms.append(term)
    terms.reverse()

    d_day = terms.pop()
    cnt = 1
    while terms:
        next = terms.pop()
        if d_day >= next:
            cnt += 1
        else:
            answer.append(cnt)
            cnt = 1
            d_day = next
    answer.append(cnt)
    return answer         #선생님 풀이 정답
print(solution([93, 50, 55], [1, 30, 5]))
print(solution([95, 90, 99, 99, 80, 99], [1, 1, 1, 1, 1, 1]))
#------------------------------------------------------------------------------------------------------------
#자료형 Deque(덱)
class DequeElement:
    def __init__(self,data,left,right,link = None):
        self.data = data
        self.left = left
        self.right = right
        self.link = link

class Deque:
    def __init__(self):
        self.rear = None
        self.front = None

    # rear에서 들어오는 형태
    def insert_rear(self, data):
        if self.rear is None:
            elem = DequeElement(data,None,None)
            self.rear = self.front = elem
        else:
            elem = DequeElement(data, None, self.rear)
            self.rear.left = elem
            self.rear = elem
        # 비어있을 때와 비어있지 않을 때를 구분해서 작성한다.
    # front에서 들어오는 형태
    def insert_front(self, data):
        if self.front is None:
            elem = DequeElement(data,None,None)
            self.front = self.rear = elem
        else:
            elem = DequeElement(data, self.front, None)
            self.front.right = elem
            self.front = elem
        # 비어있을 때와 비어있지 않을 때를 구분해서 작성한다.

    def delete_rear(self):
        if self.rear is None:
            return None
        elif self.rear == self.front:
            ret_data = self.rear.data
            self.rear = self.front = None
            return ret_data
        else:
            ret_data = self.rear.data
            self.rear = self.rear.right
            self.rear.left = None

            return ret_data

    def delete_front(self):
        if self.front is None:
            return None
        elif self.front == self.rear:
            ret_data = self.front.data
            #self.front = self.rear = None
            return ret_data
        else:
            ret_data = self.front.data
            self.front = self.front.left
            #self.front.right = None
            return ret_data

    def reverse(self):
        curr = self.front
        while curr:
            curr.left,curr.right = curr.right,curr.left
            curr = curr.right
        self.rear, self.front = self.front , self.rear

dq = Deque()
for i in range(1,11):
    if i % 2 == 0:
        dq.insert_rear(i)
    else:
        dq.insert_front(i)
    print(f"rear: {dq.rear.data}, front: {dq.front.data}")

dq.reverse()
print(f"delete_front :", end = ' ')
for i in range(5):
    print(dq.delete_front(), end = " -> ")
print()
for j in range(5):
    print(dq.delete_rear(), end = " -> ")
#-----------------------------------------------------------------------------------------------------
from collections import deque

dq = deque()
for i in range(1,11):
    if i % 2 -- 0:
        dq.appendleft(i)    # insert_rear
    else:
        dq.append(i)      #  insert_front

print(dq)
dq.reverse()          #   reverse()
print(dq)
for i in range(5):
    print(dq.pop(), end = ' -> ')   # delete_front

for i in range(5)
    print(dq.popleft(), end = ' -> ')  # delete_rear
#-------------------------------------------------------------------------------------------------------
숙제!!!!!!!!!!!!
프로그래머스 154540번
'무인도 여행'문제
