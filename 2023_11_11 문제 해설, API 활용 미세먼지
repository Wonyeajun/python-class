def solution(queue1, queue2):
    answer = 0
    queue1_all = 0
    queue2_all = 0
    cnt = 0
    queue1_all = sum(queue1)
    queue2_all = sum(queue2)
    while queue1_all != queue2_all:
        if queue1_all > queue2_all:
            queue1_all -= queue1[0]
            queue2_all += queue1[0]
            queue2.append(queue1.pop(0))
            answer += 1
        else:
            queue1_all += queue2[0]
            queue2_all -= queue2[0]
            queue1.append(queue2.pop(0))
            answer += 1
        cnt += 1
        if cnt == (len(queue1) + len(queue2)) * 3:
            return -1
    return answer          #프로그래머스 '두 큐 합 같게 만들기' 문제 내 풀이(86.72점) 까비........
#-------------------------------------------------------------------------------------------------------------
def solution(queue1, queue2):
    queue = (queue1 + queue2)
    half = sum(queue) / 2
    if half != int(half) : return -1
    sum_q1 = sum(queue1)
    s,m,e = 0 , len(queue1), len(queue2) - 1
    cnt = 0
    while half != sum_q1:
        cnt += 1
        if m >= len(queue): return -1
        # queue1이 더 클 때
        if sum_q1 > half:
            sum_q1 -= queue[s]
            s += 1
        # queue1이 더 작을 때
        elif sum_q1< half:
            sum_q1 += queue[m]
            m += 1

    return cnt             #선생님 풀이(정답)
------------------------------------------------------------------------------------------------------
import requests
import json

def get_masknum():
    servicekey = "5v6MONBHXlp5NB4c9ODMCB0an4DkBsIbrOk5e9O45h7z1MnuuO0X9YRj44GYHGYtbMzzMGC3zn+Hhzxk1Sfhzg=="
    url = 'http://apis.data.go.kr/B552584/ArpltnStatsSvc/getCtprvnMesureLIst'
    pm10_params ={'serviceKey' : servicekey, 'returnType' : 'json', 'numOfRows' : '100', 'pageNo' : '1', 'itemCode' : 'PM10', 'dataGubun' : 'HOUR', 'searchCondition' : 'MONTH' }

    pm10_response = requests.get(url, params=pm10_params).content
    pm10_result = json.loads(pm10_response)

    print(pm10_result['response']['body']['items'][0])
    pm10_incheon = pm10_result['response']['body']['items'][0]['incheon']
    pm10_gyeonggi = pm10_result['response']['body']['items'][0]['gyeonggi']
    pm10_avg = (int(pm10_incheon) + int(pm10_gyeonggi)) / 2
    print(f"미세먼지 인천 : {pm10_incheon}, 경기 : {pm10_gyeonggi}, 평균 : {pm10_avg}")

    pm25_params ={'serviceKey' : servicekey, 'returnType' : 'json', 'numOfRows' : '100', 'pageNo' : '1', 'itemCode' : 'PM25', 'dataGubun' : 'HOUR', 'searchCondition' : 'MONTH' }
    pm25_response = requests.get(url, params=pm25_params).content
    pm25_result = json.loads(pm25_response)
    pm25_incheon = pm25_result['response']['body']['items'][0]['incheon']
    pm25_gyeonggi = pm25_result['response']['body']['items'][0]['gyeonggi']
    pm25_avg = (int(pm25_incheon) + int(pm25_gyeonggi)) / 2
    print(f"초미세먼지 인천 : {pm25_incheon}, 경기 : {pm25_gyeonggi}, 평균 : {pm25_avg}")


    # 미세먼지 기준 : 0 ~ 30 ==> 좋음(1단계) / 31 ~ 80 ==> 보통(2단계) / 81 ~ 150 ==> 나쁨(3단계) / 151이상 ==> 매우나쁨(4단계)
    # 초미세먼지 기준 : 0 ~ 15 ==> 좋음(1단계) / 16 ~ 35 ==> 보통(2단계) / 36 ~ 75 ==> 나쁨(3단계) / 76이상 ==> 매우나쁨(4단계)
    for n, pm10_sd in enumerate([30, 80, 150,float('inf')],start=1):
        if pm10_avg <= pm10_sd:
            pm10_n = n
            break
    for n, pm25_sd in enumerate([15, 35, 75,float('inf')],start=1):
        if pm25_avg <= pm25_sd:
            pm25_n = n
            break
    print(f"pm10_result : {pm10_n}단계, pm25_result : {pm25_n}단계")

    return
