def solution(numbers, target):
    arr = [0]
    for i in numbers:
        temp =[]
        for j in arr:
            temp.append(j+i)
            temp.append(j-i)
            print(f"arr : {arr}")
            print(f"temp : {temp}")
        arr = temp
        print(f"arr_tempted : {arr}")
    return arr.count(target)
print(solution([1, 1, 1, 1, 1], 3)      # 프로그래머스 '타겟 넘버' 문제
-----------------------------------------------------------------------------------
클래스

클래스 생성 방법
class 클래스 이름:
   ~클래스 내용
내용에 보통 들어가는 것 : 클래스 변수, 인스턴스 변수, 클래스 메서드, 생성자..etc

class MyClass:
    val = 5 # 클래스 변수
    def __init__(self): # 생성자 함수 : 인스턴스 변수를 선언할 수 있는 기능
        self.a = 10 # 인스턴스 변수 선언
        self.b = 50

    def MyMethod(self): # 클래스 메서드
        print(0)


obj = MyClass() # MyClass 를 이용하여 객체 생성

obj.MyMethod() # 생성된 객체를 이용하여 메서드 호출

print(obj.a) # 인스턴스 변수는 객체를 이용하여 직접 접근 가능

print(obj.a + obj.b) # 연산도 가능


obj2 = MyClass() # 객체 2번
print(obj.val, obj2.val, MyClass.val) # 두 객체를 이용하여 클래스 변수 val에 접근, 클래스를 통해서도 직접 접근이 가능하다.
obj2.val = 30 # 객체를 통해 val 값을 변경??(X)
# obj2 에 "인스턴스 변수" val을 새로 선언(o)

print(obj.val, obj2.val, MyClass.val)
MyClass.val = 1000 # 클래스를 이용해서 직접 클래스 변수에 접근
print(obj.val, obj2.val, MyClass.val) # 클래스 변수, 인스턴스 변수, 클래스 변수
#---------------------------------------------------------------------------------------------------------------------
class MyClass2:
    d = 7
    def __init__(self, v1, v2, v3): # 생성자 함수를 이용하여 매개변수를 받아서 인스턴스 변수값을 지정하여 선언하는 방법
        self.a = v1
        self.b = v2
        self.c = v3

    def sum(self):
        return self.a + self.b + self.c

obj = MyClass2(10, 20, 30)
print(obj.sum())
-----------------------------------------------------------------------------------------------------------------------
class Students:
    def __init__(self,name, age, grade, num, club = ''):
        self.name = name
        self.age = age
        self.grade = grade
        self.class_num = num
        self.club = club

    def name(self):
        return self.name

    def age(self):
        return self.age

    def grade(self):
        return self.grade

    def class_num(self):
        return self.class_num

    def club(self):
        return self.club

    def Students_Data(self):
        if self.club == "":
            return (f"학생 이름 : {self.name} / 나이 : {self.age} / 학년 : {self.grade} / 출석부 번호 : {self.class_num} / 동아리 없음")
        else:
            return (f"학생 이름 : {self.name} / 나이 : {self.age} / 학년 : {self.grade} / 출석부 번호 : {self.class_num} / 동아리 : {self.club}")


obj = Students('원예준', 16, 3, 0, '수학사랑')

print(obj.Students_Data())
-----------------------------------------------------------------------------------------------------------------------
class mcls1:           # 1번 클래스
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def sum(self):
        return self.a + self.b

class mcls2:            # 2번 클래스
    def __init__(self, e):
        self.c = mcls1(1, 2)  # 1번 클래스 객체 생성 (2번 클래스의 인스턴스 변수)
        self.d = mcls1(7, 8)  # 1번 클래스 객체 생성 (2번 클래스의 인스턴스 변수)
        self.e = e # 2번 클래스의 인스턴스 변수


objc = mcls2(10)
print(objc.c, type(objc.c))
print(objc.d, type(objc.d))
print(objc.e, type(objc.e))

print(objc.c.a, objc.c.b, objc.d.a, objc.d.b)
print(objc.c.sum())
print(objc.d.sum())
#-----------------------------------------------------------------------------------------------------------------------


class Management:
    def __init__(self):
        self.sl = []

    def Input(self):
        input_name = input("이름 : ")
        input_age = input("나이 : ")
        input_grade = input("학년 : ")
        input_num = input("출석부 번호 : ")
        input_club = input("동아리 : ")
        if input_club == "":
            self.sl.append(Students(input_name, input_age, input_grade, input_num, "동아리 없음"))
        else:
            self.sl.append(Students(input_name, input_age, input_grade, input_num, input_club + '동아리'))


    def ShowAll(self):
        print("--------------------------------------------------------------------------")
        for i in range(len(self.sl)):
            print(self.sl[i].Students_Data())
        print("--------------------------------------------------------------------------")



ma = Management()
ma.Input()
ma.ShowAll()
