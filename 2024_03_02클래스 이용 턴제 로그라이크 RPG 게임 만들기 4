def solution(k, score):
    answer = []
    Return = []
    for _ in range(k):
        answer.append(2001)


    for i in range(len(score)):
        if k < i:
            if min(answer) < score[i]:
                answer.remove(min(answer))
                answer.append(score[i])
            Return.append(min(answer))
        else:
            if i != k:
                answer[i] = score[i]
                Return.append(min(answer))
            else:
                if score[i] > min(answer):
                    answer.remove(min(answer))
                answer.append(score[i])
                Return.append(min(answer))
    return Return                                                   # 프로그래머스 '명예의 전당' 문제{다음 깃허브 파일에 정답(풀었음)}
#-----------------------------------------------------------------------------------------------------------------------------------------------------------
import random
from abc import ABC, abstractmethod
class Default_Character_Setting: # 캐릭터 원형 : 공통 속성값을 가지고 있음
    def __init__(self):
        self.hp = 0 #체력
        self.mp = 0 #마나


        self.LV = 1 #레벨
        self.EXP = 0 # 경험치

        self.vit = 10 # 생명력
        self.str = 10 # 힘
        self.int = 0 # 지능


    def set_stat(self):
        init_stat = 30
        print("스텟을 분배해 주세요.")
        print("vit : 생명력 스텟입니다. 플레이어 캐릭터의 HP최대량을 결정합니다.")
        print("str : 힘 스텟입니다. 플레이어의 물리 공격력에 영향을 미칩니다.")
        print("int : 지능 스텟입니다. 플레이어의 마법 공격력및 마나 최대치에 영향을 미칩니다.")
        print("---------------------------------------------------------------------")
        while True:
            print("현재 분배된 플레이어의 스텟")
            print("vit : %d" % self.vit)
            print("str : %d" % self.str)
            print("int : %d" % self.int)
            print("분배 가능한 스텟 : %d" % init_stat)
            print("-----------------------------------------------------------------")


            prefer = input("수정할 스텟이름을 입력해 주세요(수정을 마치려면 \"마침\"을 입력해주세요) : ")

            if prefer == "마침":
                print("스텟분배 완료")
                print("현재 분배된 플레이어의 정보")

                self.hp = self.vit * 5
                self.mp = self.int * 2

                print("hp : %d" % self.hp)
                print("mp : %d" % self.mp)
                print("vit : %d" % self.vit)
                print("str : %d" % self.str)
                print("int : %d" % self.int)
                break
            elif not prefer in ["vit","str","int"]:
                print("입력 이름 오류, 다시 입력해 주세요.")
                print("-------------------------------------------------------------")
                continue

            stat = int(input("수정할 수치를 입력해 주세요 : "))
            if prefer == "vit":
                if self.vit + stat < 10 or init_stat - stat < 0:
                    print("입력값 초과, 다시 입력해 주세요.")
                    continue
                self.vit += stat
                init_stat -= stat

            elif prefer == "str":
                if self.str + stat < 10 or init_stat - stat < 0:
                    print("입력값 초과, 다시 입력해 주세요.")
                    continue
                self.str += stat
                init_stat -= stat

            elif prefer == "int":
                if self.int + stat < 0 or init_stat - stat < 0:
                    print("입력값 초과, 다시 입력해 주세요.")
                    continue
                self.int += stat
                init_stat -= stat
            else:
                print("입력 이름 오류, 다시 입력해 주세요.")
                continue

    def action_Normal_attack(self):
        randomed_Num = random.randint(1, 6)
        normal_attack_damage = (5 + (self.str * randomed_Num) * (0.3)) / 2 + randomed_Num
        return normal_attack_damage


    def action_skill_attack(self):  # 마나: 5
        cost = 5
        if cost > self.mp:
            print("마나 포인트가 부족해 스킬을 사용할 수 없습니다.")
        else:
            self.mp -= cost
            damage = 12 + (self.str * 0.4) + (self.int * 0.2)
            print(damage)
            return damage

    def action_skill_shield(self):  # 마나: 3
        cost = 3
        if cost > self.mp:
            print("마나 포인트가 부족해 스킬을 사용할 수 없습니다.")
        else:
            self.mp -= cost
            shield = 10 + self.vit * 0.1 + (self.int * 0.5)
            print(shield)
            return shield

    def action_skill_heal(self):  # 마나 : 8
        cost = 8
        if cost > self.mp:
            print("마나 포인트가 부족해 스킬을 사용할 수 없습니다.")
        else:
            self.mp -= cost
            self.vit = 2 + self.vit + (self.int * 0.35)
            print(self.vit)
            return self.vit


# 강화공격, 임시추가체력, 체력회복
# 버프 : 스텟일시증가 ,체력흡수, 속도증가
# 디버프 : 턴당 도트데미지
# 지속시간 도중에 행동하면 30%회복
# 지속시간 도중에 행동하지 않을 경우 70%회복

# 적 클래스(부모)
class Enemy_Basing(ABC): # 추상 클래스 : 추상 메서드를 사용했기 때문에 객체로 사용 불가능
    def __init__(self, n):

        self.name = n
        self.LV = 1
        self.hp = 1
        self.mp = 1

        self.vit = 1
        self.str = 1
        self.int = 1

    def Show_Info(self):
        print("개체명 : %s" % self.name)
        print("레벨 : LV.%d" % self.LV)
        print("체력 : %d" % self.hp)
        print("마나 : %d" % self.mp)


        print("\n")
        print("스탯")
        print("vit : %d" % self.vit)
        print("str : %d" % self.str)
        print("int : %d" % self.int)

    def init_stat(self):



        self.hp += self.vit * 5 + self.vit
        self.mp += self.int * 2 + self.int




    @abstractmethod
    def action_normal_attack(self):
        pass


class Knol(Enemy_Basing):
    def __init__(self):
        super().__init__("Knol")
        self.str = 10
        self.LV_scale()


    def action_normal_attack(self):
        randomed_Num = random.randint(1, 3)
        normal_attack_damage = 2 * (self.str - 1) + randomed_Num
        print(normal_attack_damage)
        return normal_attack_damage


    def LV_scale(self):
        self.vit = int(self.vit * self.LV * 0.3)
        self.str = int(self.str * self.LV * 0.3)
        self.int = int(self.int * self.LV * 0.3)
        super().init_stat()

# character = Default_Character_Setting()
# character.set_stat()

test_enemy = Knol()
test_enemy.Show_Info()
test_enemy.action_normal_attack()


# 맵(단계별, 다지선다형 길)
# 몬스터(스텟, 난수값에 의한 행동)
# 클리어 조건


#아이템과 배낭(플레이어 슬롯)
#버프계열 소모품과 스킬, 물약
#버프,디버프 부여 시설
#상점


#가챠?
#탈출,아이템 창고
#허기, 음식??
