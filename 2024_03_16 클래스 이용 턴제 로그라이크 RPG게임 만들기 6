import random
from abc import ABC, abstractmethod
class Default_Character_Setting: # 캐릭터 원형 : 공통 속성값을 가지고 있음
    def __init__(self):
        self.hp = 0 #체력
        self.mp = 0 #마나
        self.LV = 1 #레벨
        self.EXP = 0 # 경험치
        self.vit = 10 # 생명력
        self.str = 10 # 힘
        self.int = 0 # 지능
        self.shield = 0 # 쉴드

    def initz(self):
        self.hp = self.vit * 5
        self.mp = self.int * 2

    def Show(self):
        print("현재 분배된 플레이어의 스탯")
        print("vit : %d" % self.vit)
        print("str : %d" % self.str)
        print("int : %d" % self.int)

    def set_stat(self):
        init_stat = 30
        print("스탯을 분배해 주세요.")
        print("vit : 생명력 스탯입니다. 플레이어 캐릭터의 HP최대량을 결정합니다.")
        print("str : 힘 스탯입니다. 플레이어의 물리 공격력에 영향을 미칩니다.")
        print("int : 지능 스탯입니다. 플레이어의 마법 공격력및 마나 최대치에 영향을 미칩니다.")
        print("---------------------------------------------------------------------")
        while True:
            print("현재 분배된 플레이어의 스탯")
            print("hp : %d" % self.hp)
            print("mp : %d" % self.mp)
            print("vit : %d" % self.vit)
            print("str : %d" % self.str)
            print("int : %d" % self.int)
            print("분배 가능한 스탯 : %d" % init_stat)
            print("-----------------------------------------------------------------")


            prefer = input("수정할 스텟이름을 입력해 주세요(수정을 마치려면 \"마침\"을 입력해주세요) : ")

            if prefer == "마침":
                print("스텟분배 완료")
                print("현재 분배된 플레이어의 정보")
                self.initz()
                self.Show()
                break
            elif not prefer in ["vit","str","int"]:
                print("입력 이름 오류, 다시 입력해 주세요.")
                print("-------------------------------------------------------------")
                continue

            stat = int(input("수정할 수치를 입력해 주세요 : "))
            if prefer == "vit":
                if self.vit + stat < 10 or init_stat - stat < 0:
                    print("입력값 초과, 다시 입력해 주세요.")
                    continue
                self.vit += stat
                init_stat -= stat

            elif prefer == "str":
                if self.str + stat < 10 or init_stat - stat < 0:
                    print("입력값 초과, 다시 입력해 주세요.")
                    continue
                self.str += stat
                init_stat -= stat

            elif prefer == "int":
                if self.int + stat < 0 or init_stat - stat < 0:
                    print("입력값 초과, 다시 입력해 주세요.")
                    continue
                self.int += stat
                init_stat -= stat
            else:
                print("입력 이름 오류, 다시 입력해 주세요.")
                continue

    def action_Normal_attack(self):
        randomed_Num = random.randint(1, 6)
        normal_attack_damage = (5 + (self.str * randomed_Num) * (0.3)) / 2 + randomed_Num
        return normal_attack_damage


    def action_skill_attack(self):  # 마나: 5
        cost = 5
        if cost > self.mp:
            print("마나 포인트가 부족해 스킬을 사용할 수 없습니다.")
        else:
            self.mp -= cost
            damage = 12 + (self.str * 0.4) + (self.int * 0.2)
            print(damage)
            return damage

    def action_skill_shield(self):  # 마나: 3
        cost = 3
        if cost > self.mp:
            print("마나 포인트가 부족해 스킬을 사용할 수 없습니다.")
        else:
            self.mp -= cost
            shield = 10 + self.vit * 0.1 + (self.int * 0.5)
            print(shield)
            return shield

    def action_skill_heal(self):  # 마나 : 8
        cost = 8
        if cost > self.mp:
            print("마나 포인트가 부족해 스킬을 사용할 수 없습니다.")
        else:
            self.mp -= cost
            heal = int(self.int * 0.35) + 2
            print(heal)
            return  heal


# 강화공격, 임시추가체력, 체력회복
# 버프 : 스텟일시증가 ,체력흡수, 속도증가
# 디버프 : 턴당 도트데미지
# 지속시간 도중에 행동하면 30%회복
# 지속시간 도중에 행동하지 않을 경우 70%회복

# 적 클래스(부모)
class Enemy_Basing(ABC): # 추상 클래스 : 추상 메서드를 사용했기 때문에 객체로 사용 불가능
    def __init__(self, n):

        self.name = n
        self.LV = 1
        self.hp = 1
        self.mp = 1

        self.vit = 1
        self.str = 1
        self.int = 1

    def Show_Info(self):
        print("개체명 : %s" % self.name)
        print("레벨 : LV.%d" % self.LV)
        print("체력 : %d" % self.hp)
        print("마나 : %d" % self.mp)



        print("\n")
        print("스탯")
        print("vit : %d" % self.vit)
        print("str : %d" % self.str)
        print("int : %d" % self.int)
        print("--------------------------------------")

    def init_stat(self):
        self.hp += self.vit * 5 + self.vit
        self.mp += self.int * 2 + self.int

    @abstractmethod
    def action_normal_attack(self):
        pass




class Knol_tough(Enemy_Basing):
    def __init__(self):
        super().__init__("Knol")
        # self.str = 5
        # self.vit = 4
        # self.int = 8
        # self.hp = 3  # 체력
        # self.mp = 0  # 마나
        self.vit = 15
        self.str = 10
        self.LV_scale()


    def action_normal_attack(self):
        randomed_Num = random.randint(1, 3)
        action_normal_attack = (5 + (self.str * randomed_Num) * (0.1)) / 2 + randomed_Num
        return action_normal_attack

    def LV_scale(self):
        self.vit = int(self.vit * self.LV * 0.3)
        self.str = int(self.str * self.LV * 0.3)
        self.int = int(self.int * self.LV * 0.3)
        super().init_stat()



class Knol_aggressive(Enemy_Basing):
    def __init__(self):
        super().__init__("Knol")
        self.str = 10
        self.vit = 10
        self.LV_scale()

    def action_normal_attack(self):
        randomed_Num = random.randint(1, 3)
        normal_attack_damage = 1.5 * (self.str - 1) + randomed_Num
        print(normal_attack_damage)
        return normal_attack_damage

    def LV_scale(self):
        self.vit = int(self.vit * self.LV * 0.3)
        self.str = int(self.str * self.LV * 0.3)
        self.int = int(self.int * self.LV * 0.3)
        super().init_stat()


class Tanker(Enemy_Basing):
    def __init__(self):
        super().__init__("Tanker")
        self.str = 5
        self.vit = 30
        self.LV_scale()

    def action_normal_attack(self):
        randomed_Num = random.randint(1, 10)
        action_normal_attack = (4 + (self.str * randomed_Num) * (0.1)) / 2 + randomed_Num
        return action_normal_attack

    def LV_scale(self):
        self.vit = int(self.vit * self.LV * 0.2)
        self.str = int(self.str * self.LV * 0.5)
        self.int = int(self.int * self.LV * 0.1)
        super().init_stat()




class Sorcerer_Supreme(Enemy_Basing):
    def __init__(self):
        super().__init__("Sorcerer_Supreme")
        self.str = 10
        self.vit = 9
        self.int = 5
        self.LV_scale()

    def action_normal_attack(self):
        randomed_Num = random.randint(3, 6)
        actoin_normal_attack = (2 + (self.str * randomed_Num) * (0.2)) / 2 + randomed_Num
        return actoin_normal_attack

    def LV_scale(self):
        self.vit = int(self.vit * self.LV * 0.2)
        self.str = int(self.str * self.LV * 0.6)
        self.int = int(self.int * self.LV * 0.7)
        super().init_stat()




class Slime(Enemy_Basing):
    def __init__(self):
        super().__init__("Slime")
        self.str = 10
        self.vit = 20
        self.LV_scale()

    def action_normal_attack(self):
        randomed_Num = random.randint(1,2)
        normal_attack_damage = int(self.str * 0.4) + randomed_Num
        print(normal_attack_damage)
        return normal_attack_damage

    def LV_scale(self):
        self.vit = int(self.vit * self.LV * 0.2)
        self.str = int(self.str * self.LV * 0.2)
        self.int = int(self.int * self.LV * 0.3)
        super().init_stat()



class Sorcerer(Enemy_Basing):
    def __init__(self):
        super().__init__("Sorcerer")
        self.vit = 10
        self.int = 20
        self.LV = 3
        self.LV_scale()


    def action_normal_attack(self):
        randomed_Num = random.randint(1,4)
        normal_attack_damage = int(self.int + randomed_Num * 0.5)
        print(normal_attack_damage)
        return(normal_attack_damage)

    def LV_scale(self):
        self.vit = self.vit * self.LV * 0.1
        self.str = int(self.str * self.LV * 0.3)
        self.int = int(self.int * self.LV * 0.6)
        super().init_stat()



# 1. 플레이어 생성
# 2. 플레이어 기초 스탯 설정
# 3. 맵 생성
# 4. 맵 선택
# 5. 몬스터 생성
# 6. 전투

class map:

    def __init__(self):
        self.loadmap = []
        self.stat = {1: "vit", 2: "str", 3: "int"}
    def set_map(self):
        load_count = random.randint(2,5)
        # 전투 75%
        # 휴식 15%
        # 특전 10%
        for i in range(load_count):
            ser = random.randint(1 ,100)

            if 90 < ser:
                r_stat= random.randint(1,3)
                self.loadmap.append(["특전", self.stat[r_stat], random.randint(1,5)])
            elif 75 < ser:
                self.loadmap.append(["휴식"])
            elif 0 < ser:
                r_enemy = random.randint(1,3)
                self.loadmap.append(["전투", r_enemy])

    def Show_map(self):
        for i in range(len(self.loadmap)):
            print(self.loadmap[i][0], end = "  ")

    def Show_map_all(self):
        print(self.loadmap)

class Game:
    def gene(self, c):
        mob = []

        for i in range(c):
            cho = random.randint(1,6)
            if cho == 1:
                mob.append(Knol_tough)
            elif cho == 2:
                mob.append(Knol_aggressive())
            elif cho == 3:
                mob.append(Tanker())
            elif cho == 4:
                mob.append(Sorcerer_Supreme())
            elif cho == 5:
                mob.append(Slime())
            else:
                mob.append(Sorcerer())

        return mob


    def check(self, t):
        if t == None:
            return 1

    def start(self):
        Mychar = Default_Character_Setting()  # 1.
        Mychar.set_stat()       # 2.

        mob = [Knol_tough(), Knol_aggressive(), Tanker(), Sorcerer_Supreme(), Slime(), Sorcerer()]


        print("캐릭터 생성 완료")
        print("\n\n\n")


        print("맵 생성")
        mymap = map() # 3.
        mymap.set_map()
        mymap.Show_map()
        # print()
        # map.Show_map_all()

        print()
        while True:
            select = int(input("이동할 길의 번호 선택 : ")) - 1
            if select > len(mymap.loadmap):
                print("입력값 초과, 다시 입력해 주세요.")
            else:
                break

        res = mymap.loadmap[select]

        if res[0] == "전투":
            Onbattle = self.gene(res[1])

            while True:
                for i in Onbattle:
                    while True:
                        damage = 0
                        shield = 0
                        heal = 0
                        i.Show_Info()
                        print("-------------------------------------------------------------")
                        Mychar.Show()
                        print("-------------------------------------------------------------")
                        print("1. 일반공격  2. 강공격  3. 쉴드 생성  4. 체력 회복")
                        print("-------------------------------------------------------------")
                        act = int(input("행동을 선택해 주세요 : "))
                        if act == 1:
                            damage = Mychar.action_Normal_attack()
                            if damage == None or shield == None or heal == None:
                                continue
                            print("개체 %s에게 %d데미지를 주었다!" % (i.name, damage))
                            i.hp -= damage
                        elif act == 2:
                            damage = Mychar.action_skill_attack()
                            if damage == None or shield == None or heal == None:
                                continue
                            print("개체 %s에게 %d데미지를 주었다!" % (i.name, damage))
                            i.hp -= damage
                        elif act == 3:
                            shield = Mychar.action_skill_shield()
                            if damage == None or shield == None or heal == None:
                                continue
                            print("%d의 쉴드가 생성되었다!" % shield)
                            Mychar.shield = shield
                        elif act == 4:
                            heal = Mychar.action_skill_heal()
                            if damage == None or shield == None or heal == None:
                                continue
                            print("%d만큼 회복했다!" % heal)
                            Mychar.hp += heal
                        else:
                            print("입력값 오류, 다시 입력해 주세요.")
                            continue


                        if i.hp <= 0:
                            print("개체 %s을(를) 쓰러뜨렸다!" % i.name)
                            del Onbattle[0]

                        if len(Onbattle) == 0:
                            print("모든 몬스터를 쓰러뜨렸다!")
                            break

                        damage = i.action_normal_attack()
                        print("개체 %s의 공격, %d데미지를 입었다" % (i.name, damage))
                        if Mychar.shield - damage < 0:
                            Mychar.hp += Mychar.shield - damage
                        else:
                            Mychar.shield -= damage

                        if Mychar.hp <= 0:
                            print("치명상을 입었다!")
                            print("Game Over...")
                            exit(0)

        elif res[0] == "휴식":
            print("체력과 마나가 최대로 회복되었습니다!\n")
            Mychar.initz()
        elif res[0] == "특전":
            print("축복을 받아 %s스탯이 %d만큼 증가했습니다!" % (res[1],res[2]))
            if res[1] == "vit":
                Mychar.vit += res[2]
            elif res[1] == "str":
                Mychar.str += res[2]
            elif res[1] == "int":
                Mychar.int += res[2]
            Mychar.Show()
            print()



My_game = Game()
My_game.start()

#아이템과 배낭(플레이어 슬롯)
#버프계열 소모품과 스킬, 물약
#버프,디버프 부여 시설
#상점


#가챠?
#탈출,아이템 창고
#허기, 음식??
