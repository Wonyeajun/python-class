N,M,V = map(int,input().split())

matrix = [[0] * N for _ in range(N)]

for _ in range(M):
    a,b = map(int, input().split())
    matrix[a - 1][b - 1] = 1
    matrix[b - 1][a - 1] = 1

visit = [False] * N

answer = []
def DFS(curr):
    answer.append(curr + 1)
    visit[curr] = True

    for _next in range(N):
        if not visit[_next] and matrix[curr][_next]:
            DFS(_next)

DFS(V-1)
print(*answer)                                    # 백준 DFS와 BFS 문제
#----------------------------------------------------------------------------------------------------------
T = int(input())
for _ in range(T):
    M,N,K = map(int, input().split())
    field = [[0] * M for _ in range(N)]
    print(field)

for _ in range(K):
    a,b = map(int,input().split())
    field[b][a] = 1
print(field)

cnt = 0

def Cabbage(c, d):
    field[c][d] = 0
    offset_c = [1, -1, 0, 0]
    offset_d = [0, 0 ,1, -1]

    for i in range(4):
        x = c + offset_c[i]
        y = d + offset_d[i]
        if 0 <= x < N and 0 <= y < M and field[x][y]:
            Cabbage(x,y)


for i in range(N):
    for j in range(M):
        if field[i][j] == 1:
            Cabbage(i,j)
            cnt += 1
print(cnt)                                         #백준 유기농 배추 문제
#---------------------------------------------------------------------------------------
# def dfs(x, y):
#     # 상,하, 좌,우
#     dx = [1, -1, 0, 0]
#     dy = [0, 0, 1, -1]
#
#     for i in range(4):
#         nx = x + dx[i]
#         ny = y + dy[i]
#         if (0 <= nx < m) and (0 <= ny < n):
#             if graph[ny][nx] == 1:
#                 # 방문했다는 표시 -1
#                 graph[ny][nx] = -1
#                 dfs(nx, ny)
#
#
# # 테스트 케이스
# t = int(input())
#
# for i in range(t):
#     # 배추밭의 가로길이, 세로길이, 배추가 심어져 있는 위치의 개수
#     m, n, k = map(int, input().split())
#     graph = [[0] * m for _ in range(n)]
#     result = 0
#
#     # 배추 위치에 1 표시
#     for i in range(k):
#         a, b = map(int, input().split())
#         graph[b][a] = 1
#
#     # DFS를 활용해서 배추 그룹 수 세기
#     for i in range(m):
#         for j in range(n):
#             if graph[j][i] == 1:
#                 dfs(i, j)
#                 result += 1
#
#     # 출력
#     print(result)               # 다른 사람 풀이 (유기농 배추)
