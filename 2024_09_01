# first(): hidato를 넘겨 받아, 시작하는 수인 1의 위치를 담은 튜플을 리턴하는 함수이다.
# # 결과값의 형태는 (𝑟, 𝑐) r:행, c: 열
def first(place):
    r = len(place)
    c = len(place[0])
    x = 0
    y = 0
    for i in range(r):
        if 1 in place[i]:
            x = i
    for i in range(c):
        if place[x][i] == 1:
            y = i
    return x,y

# successor(): 후속자를 찾는 함수, hidato와 현재 보고 있는 후속자의 행의 위치인 r과 열의 위치인 c를 넘겨 받아
# 해당 위치에 있는 수의 후속자를 찾아 그 위치를 담은 튜플을 반환하는 함수. 결과값의 형태는 (r,c) r: 행, c: 열
# 후속자는 현재 위치한 수에 8방향으로 1칸 내에 위치한 값이어야 하며 현재 값 보다 1더 큰 수를 의미한다. 만약 후속자를
# 찾지 못한 경우 (None, None)를 반환하라
def successor(board,r,c):
    if r == c == None:
        return (None, None)
    target = board[r][c] + 1
    offset = (r-1,c), (r-1, c-1), (r,c-1), (r+1,c-1), (r+1,c),(r+1,c+1),(r, c+1), (r-1,c+1)
    for nx,ny in offset:
        if 0 <= nx <= r and 0 <= ny <= c:
            if board[nx][ny] == target:
                return nx,ny
    return (None,None)


# last(): hidato를 넘겨받아 후속자를 찾는 행위를 진행하고 마지막으로 멈춘 위치를 튜플에 담아 반환하라.
def last(board):
    return

# hidato(): Hidato를 넘겨 받아 후속자를 찾는 행위를 진행하였을 때, 1에서 시작하여 마지막으로 도달한 위치의 값이
# 총 셀 개수(행X열)과 같다면 True, 아니라면 False를 리턴하는 함수
def hidato(board):
    cnt = 1
    x,y = first(board)
    print(f"x,y : {x,y}")
    print(f"s")
    print(f"sdf")
    Flag = 0
    while Flag == 0:
        if successor(board,x,y) == (None,None):
            Flag = 1
        else:
            cnt += 1
            x,y = successor(board,x,y)
            print(f"x,y : {x,y}")
    print(f"len : {len(board) * len(board[0])}, cnt : {cnt}")
    if len(board) * len(board[0]) == cnt:
        return True
    else:
        return False                    # 내 풀이
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------

def first(board):
    for i in range(len(board)):
        for j in range(len(board)):
            if board[i][j] == 1:
                return i,j


def successor(board, sr, sc):
    _next = board[sr][sc] + 1
    for nx in range(sr - 1, sr + 2):
        for ny in range(sc - 1, sc + 2):
            if (nx,ny) == (sr,sc) : continue
            if 0 <= nx < len(board) and 0 <= ny < len(board):
                if board[nx][ny] == _next:
                    return nx, ny
    return None, None

def last(board):
    x,y = first(board)
    while True:
        nx, ny = successor(board, x, y)
        if (nx, ny) == (None, None):
            return x, y
        x, y = nx, ny


def hidato(board):
    x, y = last(board)
    return board[x][y] == len(board) * len(board[0])                 # 내 풀이

#-------------------------------------------------------------------------------------------------------------------------------------------------------------

# print(first([[5, 4, 11, 12], [6, 10, 3, 2], [7, 8, 9, 1]]))                                               #5  4  11  12
#                                                                                                           #6  10  3   2
#                                                                                                           #7  8   9   1
#
#
# (2, 3)
# print(first([[8, 14, 13, 12], [15, 1, 2, 11], [5, 3, 10, 16], [4, 6, 7, 9]]))
# #(1, 1)
# print(first(((18, 19, 20, 4, 5), (17, 1, 3, 6, 8), (16, 13, 2, 9, 7), (14, 15, 12, 11, 10))))
# #(1, 1)
# print(successor([[5, 4, 11, 12], [6, 10, 3, 2], [7, 8, 9, 1]], 2, 3))
# #(1, 3)
# print(successor([[5, 4, 11, 12], [6, 10, 3, 2], [7, 8, 9, 1]], 1, 3))
# #(1, 2)
# print(successor([[5, 4, 11, 2], [6, 10, 3, 12], [7, 8, 9, 1]], 2, 3))
# #(None, None)
# print(last([[5, 4, 11, 12], [6, 10, 3, 2], [7, 8, 9, 1]]))
# #(0, 3)
# print(last([[8, 14, 13, 12], [15, 1, 2, 11], [5, 3, 10, 16], [4, 6, 7, 9]]))
# #(3, 2)
# print(last(((18, 19, 20, 4, 5), (17, 1, 3, 6, 8), (16, 13, 2, 9, 7), (14, 15, 12, 11, 10))))
# #(0, 2)
print(hidato([[5, 4, 11, 12], [6, 10, 3, 2], [7, 8, 9, 1]]))
True
print(hidato([[8, 14, 13, 12], [15, 1, 2, 11], [5, 3, 10, 16], [4, 6, 7, 9]]))
False
8
print(hidato(((18, 19, 20, 4, 5), (17, 1, 3, 6, 8), (16, 13, 2, 9, 7), (14, 15, 12, 11, 10))))
True



#------------------------------------------------------------------------------------------------------------------------------------------------------
숙제 : 소수 찾기
  ! permutations 활용하기
