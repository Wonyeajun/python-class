from itertools import permutations

def solution(numbers):
    answer = 0
    Nums = []
    Length = len(numbers)
    standard = [2, 3, 5, 7]
    for i in range(1, Length + 1):
        nums = list(permutations(numbers, i))
        print(f"nums : {nums}")
        for j in range(len(nums)):
            data = ''.join(nums[j])
            print(f"data : {data}")
            if len(data) == 1 and data[0] == '0':
                continue
            while True:
                if data[0] != '0':
                    break
                data = data.replace(data[0], '')
            if data not in Nums:
                Nums.append(data)
    print(f"Nums : {Nums}")
    for i in Nums:
        Flag = 0
        if i =='1':
            Flag = 1
        elif i == '2':
            answer += 1
            continue
        for j in standard:
            if int(i) % j == 0 and int(i) != j:
                Flag = 1
            if int(int(i) ** 0.5) == int(i) ** 0.5:
                Flag = 1
        if Flag == 0:
            print(i)
#---------------------------------------------------------------------------------------------------------------------------------------------------------
from itertools import permutations

def Sieve_of_Eratosthenes(num):
    cnt = 0
    C_mon = int(0.5 * int(num)) + 1
    num = int(num)
    if num == 1:
        return False
    if num == 2:
        return True
    for i in range(2, C_mon):
        if num % i == 0:
            cnt += 1
    if cnt == 1:
        return True
    return False
def solution(numbers):
    answer = 0
    Nums = []
    Length = len(numbers)
    standard = [2, 3, 5, 7]
    for i in range(1, Length + 1):
        nums = list(permutations(numbers, i))
        for j in range(len(nums)):
            data = ''.join(nums[j])
            if len(data) == 1 and data[0] == '0':
                continue
            while True:
                if data[0] != '0':
                    break
                data = data.replace(data[0], '')
            if data not in Nums:
                Nums.append(data)
    for i in Nums:
        if Sieve_of_Eratosthenes(i) == True:
            print(f"i : {i}, type(i) : {type(i)}")
            answer += 1
    return answer                                                                         (고친 거)
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
from itertools import permutations
#permutaions(연속된 자료형, 개수) = 해당 개수만큼 중복되지 않은 수열을 만들어냄

def prime(n):
    if n < 2:
        return False
    #k = n의 제곱근
    k = int(n ** 0.5) +1
    #소수는 1과 자기자신까지만 가능하다.
    #소수인지 판별할때는 제곱근 까지의 수들로 나누어줘도 가능하다.
    for i in range(2,k):
        if n % i == 0:
            return False
    return True

def solution(numbers):
    answer = 0
    nums = set([])
    for i in range(len(numbers)):
        num_list = list(permutations(numbers,i+1))
        for j in num_list:
            nums.add(int("".join(j)))
    for i in nums:  
        if prime(i):
            answer += 1
    return answer
#--------------------------------------------------------------------------
import numpy as np

# def perception_AND(x1, x2):
#     #AND 게이트의 가중치와 편향
#     w = np.array([0.5, 0.5]) # 가중치
#     b = -0.7                 # 편향

#     # 입력값과 가중치의 내적 + 편향
#     z = np.dot(np.array([x1, x2]), w) + b

#     # 출력 : z > 0이면 1, 그렇지 않으면 0
#     return 1 if z > 0 else 0


# print(perception_AND(0, 0))
# print(perception_AND(0, 1))
# print(perception_AND(1, 0))
# print(perception_AND(1, 1))
#------------------------------------------------------------------------------------------------------------------------
# def perception_OR(x1, x2):
#     #OR 게이트의 가중치와 편향
#     w = np.array([0.5, 0.5]) # 가중치
#     b = -0.2                # 편향

#     # 입력값과 가중치의 내적 + 편향
#     z = np.dot(np.array([x1, x2]), w) + b

#     # 출력 : z > 0이면 1, 그렇지 않으면 0
#     return 1 if z > 0 else 0


# print(perception_OR(0, 0))
# print(perception_OR(0, 1))
# print(perception_OR(1, 0))
# print(perception_OR(1, 1))
#----------------------------------------------------------------------------------------------------------------------------
def perceptron_NOT(x):
    # NOT 게이트의 가중치와 편향
    W = np.array([-1.0]) # 가중치
    b = 0.5              # 편향

    # 입력값과 가중치의 내적 + 편향
    z = np.dot(np.array([x]), W) + b

    # 출력 : z > 0이면 1, 그렇지 않으면 0
    return 1 if z > 0 else 0

# 테스트
print(perception_NOT(0)) # 출력 : 1
print(perceptron_NOT(1)) # 출력 : 0
#----------------------------------------------------------------------------------------------------------------------------------
def common(a):
    A = a.split(":")
        return int(A[0]) * 60 + int(A[1])
def Calculating_time(b):
    A = int(b) // 60
    B = int(b) % 60
    if A < 10 and B < 10:
        return f"0{A}:0{B}"
    elif A < 10 and B >= 10:
        return f"0{A}:{B}"
    elif A >= 10 and B < 10:
        return f"{A}:0{B}"
    else:
        return f"{A}:{B}
def skip_determine(pos, start, end):
    list = [pos, start, end]
    time = []
    for i in list:
        time.append(common(i))
    if time[1] <= time[0] <= time[2]:
        return True
    return False
def solution(video_len, pos, op_start, op_end, commands):
    if skip_determine(pos, op_start, op_end):
        pos = op_end
    Time = pos
    for i in commands:
        if i == "prev":
            Time = prev(pos)
        if i == "next":
            Time next(pos)
    return Time
def prev(pos):
    time = common(pos)
    if time <= 10:
        return "00:00"
    else:
        return Calculating_time(time - 10)
def next(pos):
