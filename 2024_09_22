
def common(a):
    A = a.split(":")
    return int(A[0]) * 60 + int(A[1])
def Calculating_time(b):
    A = int(b) // 60
    B = int(b) % 60
    if A < 10 and B < 10:
        return f"0{A}:0{B}"
    elif A < 10 and B >= 10:
        return f"0{A}:{B}"
    elif A >= 10 and B < 10:
        return f"{A}:0{B}"
    else:
        return f"{A}:{B}"
def skip_determine(pos, start, end):
    list = [pos, start, end]
    time = []
    for i in list:
        time.append(common(i))
    if time[1] <= time[0] <= time[2]:
        return True
    return False
def prev(pos):
    time = common(pos)
    if time <= 10:
        return "00:00"
    else:
        return Calculating_time(time - 10)
def next(pos, length):
    time = common(pos)
    if time >= common(length) - 10:
        return length
    else:
        return Calculating_time(time + 10)
def solution(video_len, pos, op_start, op_end, commands):
    if skip_determine(pos, op_start, op_end):
        pos = op_end
    Time = pos
    for i in commands:
        if i == "prev":
            Time = prev(Time)
            print(f"prev_Time : {Time}")
        if i == "next":
            Time = next(Time, video_len)
            print(f"next_Time : {Time}")
        if skip_determine(Time, op_start, op_end):
            Time = op_end
    return Time                                                                                                        # 동영상 재생기(성공)
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def solution(number, k):
Num = list(number)
print(Num)
while k != 0:
    num = Num                                                   # Num : [], num : ['1', '2', '3', '1', '2', '3', '4']
    Num = []
    for _ in range(len(num)):
        if len(num) == 1:
            break
        if int(num[0]) >= int(num[1]) and num[1] != '0':
            Num.append(num.pop(0))
        else:
            num.pop(0)
            k -= 1
            if k == 0:
                break
    if len(num) != 0:
        for i in num:
            Num.append(i)
print(Num)
return ''.join(Num)                                                                                        # 큰 수 만들기(실패)
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def solution(number, k):
    stack = []
    for num in number:
        while stack and stack[-1] < num and k > 0:
            k -= 1
            stack.pop()
        stack.append(num)
        # print(f"stack = {stack}")
    if k != 0:
        stack = stack[:-k]
    return ''.join(stack)                                                                                       # 큰 수 만들기(선생님 풀이, 성공)
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import numpy as np

# Sigmoid 함수
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# 예시 입력
x = np.array([1.0, -1.0, 0.0])
print("Sigmoid 결과 : ", sigmoid(x))
# Sigmoid 결과 : [0.73105858 0.26894142 0.5

def softmax(x):
    # Overflow 방지를 위해 입력에서 최댓값을 빼줍니다.
    exp_x = np.exp(x - np.max(x))
    return exp_x / np.sum(exp_x, axis = 0)


# 예시 입력
x = np.array([1.0, 2.0, 3.0])
print("Softmax 결과 : ", softmax(x))

# ReLU 함수
def relu(x):
    return np.maximum(0, x) # Leaky ReLU면 (0.01x, x)


# 예시 입력
x = np.array([-2.0, -1.0, 0.0, 1.0, 2.0])
print("ReLU 결과 : ", relu(x)) # ReLU 결과 : [0. 0. 0. 1. 2.]

# Tanh 함수
def tanh(x):
    return np.tanh(x)


# 예시 입력
x = np.array([-2.0, -1.0, 0.0, 1.0, 2.0])
print("Tanh 결과 : ", tanh(x)) # Tanh 결과 :  [-0.96402758 -0.76159416  0.          0.76159416  0.96402758]

# BCE 손실 함수
def binary_cross_entropy(y_true, y_pred):
    # 작은 값 epsilon을 더해서 로그에서 0을 방지합니다.
    epsilon = 1e-15
    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)
    return -np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred))


# 예시 입력
y_true = np.array([1, 0, 1])
y_pred = np.array([0.9, 0.2, 0.8])
print("BCE 손실 : ", binary_cross_entropy(y_true, y_pred))

# MSE 손실 함수
def mean_squared_error(y_true, y_pred):
    return np.mean((y_true - y_pred) ** 2)


# 예시 입력
y_true = np.array([1, 0, 1])
y_pred = np.array([0.9, 0.2, 0.8])
print("MSE 손실 : ", mean_squared_error(y_true, y_pred))

# CCE 손실 함수
def categorical_cross_entropy(y_true, y_pred):
    # 작은 값 epsilon을 더해서 로그에서 0을 방지합니다.
    epsilon = 1e-15
    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)
    return -np.sum(y_true * np.log(y_pred)) / y_true.shape[0]

# 예시 입력 (One - hot 인코딩)
y_true = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
y_pred = np.array([[0.9, 0.05, 0.05], [0.1, 0.8, 0.1], [0.05, 0.1, 0.85]])
print("CCE 손실:", categorical_cross_entropy(y_true, y_pred))

import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import SGD

# 1. XOR 데이터셋 정의
# XOR 문제를 위한 입력과 출력 정의
# 입력 : 2차원 배열 (두 개의 이진 값)
# 출력 : XOR 연산 결과 (0 또는 1)
X = np.array([[0, 0], [0, 1], 능
