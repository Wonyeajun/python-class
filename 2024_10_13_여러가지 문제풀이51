# picks의 곡괭이들로 minerals의 광물들을 캘 때 드는 최소 피로도를 구하라
# 곡괭이 하나당 광물 5개를 캐야 다른 곡괭이로 변경 가능, 광물은 순서대로 캐야한다.
# 다이아 곡괭이: [다이아:1,철:1,돌:1], 철 곡괭이: [다이아:5, 철:1, 돌:1], 돌 곡괭이: [다이아:25, 철:5, 돌:1]
# 만약 주어진 곡괭이를 모두 사용했다면, 더 광물을 캘 수 없다.

def solution(picks,minerals):
    # 곡괭이 수 * 5 == 내가 캘 수 있는 광물의 수, 만약 캘 수 있는 광물 수 보다 더 많은 광물이 있다면
    # 처음부터 없애고 생각한다.
    if sum(picks) * 5 < len(minerals):
        minerals = minerals[:sum(picks) * 5]

    # 광물들을 5개씩 자르고, 그 광물들안에서 다이아, 철, 돌의 개수를 파악
    # 파악 한 후 다이아 > 철 > 곡괭이가 많은 순서대로 정렬하여, 다이아, 철, 곡괭이 순서대로 사용한다.
    mineral_counts = []                         # [[다이아, 철, 돌의 개수], ....]
    mineral_name = ['diamond', 'iron', 'stone']
    for i in range(0,len(minerals),5):
        temp = []
        for name in mineral_name:
            temp.append(minerals[i:i+5].count(name))
        mineral_counts.append(temp)

    mineral_counts.sort(reverse=True)
    print(mineral_counts)
    pirodo = [[1,1,1],[5,1,1],[25,5,1]]
    answer = 0
    mdx = 0                         # mineral_counts의 index번호
    for pdx in range(3):            # pdx: 곡괭이번호
        pick_cnt = picks[pdx]       # pick_cnt: 곡괭이 개수
        for _ in range(pick_cnt):
            for idx in range(3):    #idx: 광물 번호(0:다이아, 1: 철, 2: 돌)
                answer += pirodo[pdx][idx] * mineral_counts[mdx][idx]
            mdx += 1
            if mdx >= len(mineral_counts):
                return answer
    return answer
