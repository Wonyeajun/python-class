def solution(triangle):
    for i in range(1,len(triangle)):
        for j in range(len(triangle[i])):
            if j == 0:
                triangle[i][j] += triangle[i-1][j]
            elif j == len(triangle[i])-1:
                triangle[i][j] += triangle[i-1][j-1]
            else:
                triangle[i][j] += max(triangle[i-1][j-1], triangle[i-1][j])
    return max(triangle[-1])                                                    프로그래머스 '정수 삼각형' 문제 선생님 풀이(정답)
#----------------------------------------------------------------------------------------------------------------------------------------------------
def solution(triangle):
    # 각 층의 인덱스 개수
    floor = len(triangle) - 1

    while floor > 0:
        for i in range(floor):
            triangle[floor - 1][i] += max(triangle[floor][i], triangle[floor][i + 1])
        floor -= 1
    return triangle[0][0]                                                      프로그래머스 '정수 삼각형' 문제 내 풀이(정답)
#----------------------------------------------------------------------------------------------------------------------------------------------------
def solution(N,number):
    if N == number:
        return 1
    # [{5},{55,5+5,5-5,5*5,5/5},{555,(5+5)+5,(5+5)-5,(5+5)*5,(5+5)/5},{5555},...]
    dp = [{int(str(N) * i)} for i in range(1,9)]
    for i in range(1,8):
        for j in range(i):
            # A와 B를 만드는데 사용될 내용
            # 사용횟수별로 나올 수 있는 집합 만들기
            for a in dp[j]:
                for b in dp[i-j-1]:
                    dp[i].add(a + b)
                    dp[i].add(a - b)
                    dp[i].add(a * b)
                    if b:
                        dp[i].add(a // b)

        if number in dp[i]:
            return i+1
    return -1                                                  # 프로그래머스 'N으로 표현' 문제 선생님 풀이(정답)
#-------------------------------------------------------------------------------------------------------------------------------------
def arithmetic(L1, L2, n, N):
    first = int('1' * n) * N
    Jeong = [first]
    if n:
        Jeong.append(L2 + L1)
        Jeong.append(L2 - L1)
        Jeong.append(L2 * L1)
        Jeong.append(L2 // L1)
    else:
        for i in L1:
            for j in L2:
                Jeong.append(i + j)
                Jeong.append(i - j)
                Jeong.append(i * j)
                if j:
                    Jeong.append(i // j)
        for i in L2:
            for j in L1:
                Jeong.append(j - i)
                if i:
                    Jeong.append(j // i)
        return list(set(Jeong))


def solution(N, number):
    target2 = []
    target1 = []
    A = []
    for i in range(8):
        if not i:
            target1.append(N)
            if N == number:
                print('sfda')
                return 1
        elif i:
            target2 = N
            A = arithmetic(target1, target2, i, N)
            print(f"A : {A}")
            target2 = [target1]
            target1 = A
        else:
            A = arithmetic(target1, target2, i, N)
            print(f"A : {A}")
            target2 = target1
            target1 = A
        if N in target1:
            return i + 1
    return -1

print(solution(5, 12)) # 4
print(solution(2, 11)) # 3                                                # 프로그래머스 'N으로 표현' 문제 내 풀이(오답)
#-----------------------------------------------------------------------------------------------------------------------------------------------
